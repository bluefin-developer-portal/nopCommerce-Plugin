@model PaymentInfoModel


@{
    Layout = "";
    NopHtml.AddScriptParts(ResourceLocation.Head, BluefinPaymentDefaults.ScriptPath, excludeFromBundle: true);
    /*
    #bluefin-iframe-container {
        @if (Model.IframeResponsive)
        {
            <text>
            overflow: hidden;
            </text>
        }
    }
    */
}

<style>
    #bluefin-iframe-container {
        width: 100%;
        min-height: 400px;
    }
    
    #bluefin-iframe-container iframe {
        border: none;
    }

    @if (Model.IframeResponsive) {
        <text>
            @@media screen and (width >= 1024px) {
                #bluefin-iframe-container iframe {
                    height: 700px;
                }
            }

            @@media screen and (max-width: 1024px) {
                #bluefin-iframe-container iframe {
                    height: 600px;
                }
            }
        </text>
    }


</style>

<input asp-for="IFrameCompleted" id="IFrameCompleted" type="hidden" />
<div id="bluefin-iframe-container"></div>

<script>
    ; (function () {

        const id = setInterval(() => {
            if (window.IframeV2 != null) {
                clearInterval(id)
                loadIframe()
            }
        }, 111)

        function isDigit(c) {
            return c >= '0' && c <= '9'
        }

        function removeCurrency(amount) { // Remove currency sign from the start from PrepareOrderTotalsModelAsync => OrderTotalsModel.orderTotal

            if (!isDigit(amount[0])) {
                let inx = -1
                for (let i = 1; i < amount.length; i++) {
                    if (isDigit(amount[i])) {
                        inx = i
                        break
                    }
                }
                return amount.slice(inx == -1 ? 0 : inx)

            } else if (!isDigit(amount[amount.length - 1])) {
                let inx = -1
                for (let i = amount.length - 2; i >= 0; i--) {
                    if (isDigit(amount[i])) {
                        inx = i
                        break
                    }
                }
                return amount.slice(0, inx + 1)
            }
            return amount

        }

        function removeLeadingPlus(phoneNumber) {
            return phoneNumber.replaceAll('&#x2B;', '')
        }


        function loadIframe() {
            // if(window.BluefinIframe) return

            // window.BluefinIframe = true

            @{
                    // BillingAddress
                    var customer = await workContext.GetCurrentCustomerAsync();
                    var address = await addressService.GetAddressByIdAsync(customer.BillingAddressId ?? 0);
                    var stateProvince = await stateProvinceService.GetStateProvinceByAddressAsync(address);
                    var country = await countryService.GetCountryByAddressAsync(address);

                    // ShippingAddress
                    Address shipping_address = null;
                    StateProvince shipping_stateProvince = null;
                    Country shipping_country = null;

                    var shippingEnabled = false;

                    var store = await storeContext.GetCurrentStoreAsync();
                    var cart = await shoppingCartService.GetShoppingCartAsync(customer, ShoppingCartType.ShoppingCart, store.Id);

                    foreach(ShoppingCartItem cardItem in cart) {
                        var product = await productService.GetProductByIdAsync(cardItem.ProductId);
                        // NOTE: First Product in the cart to have shipping enabled wins
                        if(product.IsShipEnabled) {
                            shippingEnabled = true;
                            break;
                        }
                    }

                    if(shippingEnabled) {
                        shipping_address = await addressService.GetAddressByIdAsync(customer.ShippingAddressId ?? 0);
                        shipping_stateProvince = await stateProvinceService.GetStateProvinceByAddressAsync(shipping_address);
                        shipping_country = await countryService.GetCountryByAddressAsync(shipping_address);
                    }

                    var shopping_model = await shoppingCartModelFactory.PrepareOrderTotalsModelAsync(cart, false);


                    var pickupPoint = await genericAttributeService.GetAttributeAsync<PickupPoint>(customer,
                        NopCustomerDefaults.SelectedPickupPointAttribute, store.Id);

                    var currency = await workContext.GetWorkingCurrencyAsync();

                    var devServer = bluefinPaymentSettings.UseSandbox ? 
                        BluefinPaymentDefaults.CheckoutComponentCERT : BluefinPaymentDefaults.CheckoutComponentPROD;
                }

            const iframeConfig = {
                parentDivId: 'bluefin-iframe-container',
                width: '@(string.IsNullOrEmpty(Model.IframeWidth) ? "100%" : Model.IframeWidth)'
            }

            @if(!Model.IframeResponsive) {
                <text>
                    iframeConfig.height = '@(string.IsNullOrEmpty(Model.IframeHeight) ? "600px" : Model.IframeHeight)'
                </text>
            }

            if(!window.iframe_session) {
                window.iframe_session = {
                    start: Date.now()
                }
            }

            window.iframe_session.passed = Date.now() - window.iframe_session.start;

            let passed = parseInt(window.iframe_session.passed / 1000)

            let timeout = parseInt('@bluefinPaymentSettings.IframeTimeout') - passed;

            if(timeout <= 0) {
                alert("Iframe Payment Session Expired. Please, refresh the page and try again.")
                return
            }


            let shippingEnabled = '@shippingEnabled' == 'True'

            let customer = {
                Timeout: timeout,
                CustomerId: '@customer.Id',
                // TODO: Try to find the proper order total so that we don't have to do this
                Amount: removeCurrency('@shopping_model.OrderTotal'),
                Currency: '@currency.CurrencyCode',
                Email: '@address?.Email',
                BillingAddress: {
                    FirstName: '@address?.FirstName',
                    LastName: '@address?.LastName',
                    PhoneNumber: '+' + removeLeadingPlus('@address?.PhoneNumber'),
                    Address1: '@address?.Address1',
                    Address2: '@address?.Address2',
                    City: '@address?.City',
                    State: '@stateProvince?.Abbreviation',
                    Zip: '@address?.ZipPostalCode',
                    Company: '@address?.Company',
                    Country: '@country?.ThreeLetterIsoCode'
                }
            }

            if(shippingEnabled) {
                customer.ShippingAddress = {
                    FirstName: '@shipping_address?.FirstName',
                    LastName: '@shipping_address?.LastName',
                    PhoneNumber: '+' + removeLeadingPlus('@shipping_address?.PhoneNumber'),
                    Address1: '@shipping_address?.Address1',
                    Address2: '@shipping_address?.Address2',
                    City: '@shipping_address?.City',
                    State: '@shipping_stateProvince?.Abbreviation',
                    Zip: '@shipping_address?.ZipPostalCode',
                    Company: '@shipping_address?.Company',
                    Country: '@shipping_country?.ThreeLetterIsoCode'
                }
            }

            // Handle Pickup Address Information if selected by the user
            @if(pickupPoint != null) {
                <text>
                    let pickup_info = {
                        ShippingAddress: {
                            FirstName: '@pickupPoint?.Name',
                            Address1: '@pickupPoint?.Address',
                            City: '@pickupPoint?.City',
                            State: '@pickupPoint?.StateAbbreviation',
                            Zip: '@pickupPoint?.ZipPostalCode',
                            Country: '@pickupPoint?.CountryCode' // NOTE: two-letter ISO country code
                        }
                    }

                    // Overwrite
                    customer.ShippingAddress = pickup_info.ShippingAddress;

                </text>
            }

            // console.debug('customer:', shippingEnabled, customer)
            

            const callbacks = {
                iframeLoaded: function () {
                    // Bypass the nopCommerce default
                    let save_button = document.querySelector('button[onclick="PaymentInfo.save()"]')
                    save_button && save_button.remove()
                    console.debug('Iframe loaded')
                },
                checkoutComplete: async function (data) {
                    const bfTokenReference = data.bfTokenReference

                    try {
                        let response = await fetch('@(Url.Action("SetBluefinToken", "PaymentBluefin"))', {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/x-www-form-urlencoded",
                            },
                            body: new URLSearchParams({
                                bfTokenReference,
                            })

                        })

                        if(!response.ok) {
                            let err = new Error("HTTP status code: " + response.status)
                            err.response = response
                            err.status = response.status
                            throw err
                        }


                        if (data.data.meta.savePaymentOption) {
                            let response = await fetch('@(Url.Action("StoreBluefinToken", "PaymentBluefin"))', {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/x-www-form-urlencoded",
                                },
                                /*
                                body: new URLSearchParams({
                                    customerId: '@customer.Id',
                                    bfTokenReference,
                                })
                                */

                            })

                            if(!response.ok) {
                                let err = new Error("HTTP status code: " + response.status)
                                err.response = response
                                err.status = response.status
                                throw err
                            }

                        }

                    } catch (err) {
                        // TODO: Be more specific when returning error response text from the controller. This essentially just gives us the C# exception.
                        alert(err.toString())
                        return
                    }

                    document.getElementById('IFrameCompleted').value = 'Checkout Completed'
                    PaymentInfo.save()

                    // console.debug('Checkout complete:', data)
                },
                error: function (data) {
                    console.error('Error:', data)
                    // alert(JSON.stringify(data))
                },
                timeout: function (data) {
                    console.debug('Timeout:', data)
                },
            }

            // "Cache" the bearerToken in the current page so we keep keep the state of the checkout component after ValidatePaymentFormAsync
            // This also gets reused if the customer clicks on the "Back" button. However, there is one edge case where if we change the customer-related information by going back, the checkout component won't be recreated in the current page session.
            // if (!window.bearerToken) 
            {

            /*
            for(let message of (window.getEventListeners(window).message || [])) {
                if(window.IframeV2.init.toString().indexOf(message.listener.toString()) != -1) {
                    window.removeEventListener('message', message.listener)
                }
            }
            */
            
            $.ajax({
                    async: true,
                    type: 'POST',
                    url: '@(Url.Action("InitIframe", "PaymentBluefin"))',
                    data: customer,
                    success: function (data) {
                        window.bearerToken = data.bearerToken
                        window.IframeV2.init(iframeConfig,
                            data.bearerToken,
                            callbacks,
                            null,
                            '@devServer')
                    },
                    error: function (request, status, error) {
                        alert(request.responseText)
                    }
                })
            /*
            } else {
                window.IframeV2.init(iframeConfig,
                    window.bearerToken,
                    callbacks,
                    null,
                    '@devServer')

            }
            */
            }
        }
    
    })();


</script>

@NopHtml.GenerateScripts(ResourceLocation.Head)